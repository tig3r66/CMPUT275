Name: Edward (Eddie) Guo
ID: 1576381
Partner: Jason Kim
CMPUT 275, Winter 2020

Final Project: EEG Visualizer

Video link: https://drive.google.com/file/d/1q6Bk2-tndph_bBO89cXf5Dsgq7j0_WrZ/view?usp=sharing

--------------
Included Files
--------------
* README
* requirements.txt
* eddie_jason_cmput275.mp4

* src/
    * eeg_data/
        * data.txt
    * helper_classes/
        * mpl_canvas.py
        * worker_threads.py
    * fft.py
    * main.py
    * plot_window.py
    * send_eeg_data.py

* documentation/
    * fft_math/
        * cooley_tukey.pdf
        * cooley_tukey.tex
        * Makefile
    * proposal/
        * Makefile
        * proposal.pdf
        * proposal.tex

------------
Requirements
------------
    1. Python 3.6 or later.
    2. Packages: PyQt5, matplotlib, numpy, pylsl

------------
Installation
------------
    1. Ensure that you are in the directory containing "requirements
    2. Type "pip3 install -r requirements.txt" in the command-line.

---------------------
Running Instructions
---------------------
    1. Navigate into the "src/" directory (the one with "main.py").

    2. Ensure that an EEG signal is sending data over your local network via
    LSL (Lab Streaming Layer). If not, then type "python3 send_eeg_data.py" in
    the command-line to send EEG data from a text file (this is a continual
    loop).

    3. To run the application, type "python3 main.py" in the command-line.

-----
Notes
-----
    * This application only displays the live EEG signals and FFT plot for a
    single channel. If there are multiple channels, only the first channel in
    your stream outlet will be visualized.

    * Data must be streaming before you click "Get Streams" in the main
    application. Otherwise an error dialogue will pop up. Please restart the
    program if this occurs.

        * If you click "Get Streams" without data streaming, send the data, then
        click "Get Streams" again, the visualization will not be correct (it
        does not plot all the points at the correct timestamp).

        * If you click "Get Streams" without data streaming, send the data,
        then click "Stop Streams", the program will freeze. This is because the
        thread that tries to pull data will keep on searching the network for a
        stream. The function that pulls data was from the LSL library, and we
        could not find a way to incorporate a proper timeout.

    * All data is plotted at their respective timestamps. This means that any
    seemingly time-inconsistent data plotting is due to the time it takes to
    plot the data from the data buffer.

    * We did not feel comfortable including Bluestein's chirp-Z transform as we
    did not have the adequate background to confidently understand the math
    behind it (though we originally implemented it based on pseudo-code).
    Consequently, we only implemented the radix-2 decimation-in-time algorithm.

    * TeXed documentation for the proposal and FFT algorithms are located in
    the "documentation" directory. The GitHub repository contains a GIF of the
    running application: https://github.com/tig3r66/CMPUT275.

-------------
Contributions
-------------
Eddie
    * Wrote the UI code and application logic.
    * Managed the multi-threading aspects.
    * Handled LSL-related code.
    * Wrote TeXed documentation.

Jason
    * Wrote the FFT code and unit tests.
    * Created the helper matplotlib class to integrate the plots as QWidgets.
    * Tested the main application for bugs.
